// Comments
.syntax--comment {
  color: @syntax-color-comment;
}
.syntax--punctuation.syntax--definition.syntax--comment {
  color: darken(@syntax-color-comment, 18%);
}

// Punctuation
.syntax--punctuation {
  color: @syntax-text-color;
}
.syntax--punctuation.syntax--definition.syntax-heading,
.syntax--punctuation.syntax--definition.syntax-identity {
  color: @syntax-color-definition;
}
.syntax--punctuation.syntax--definition.syntax--bold {
  color: @syntax-color-value;
  font-style: bold;
}
.syntax--punctuation.syntax--definition.syntax--italic {
  color: @syntax-color-constant;
  font-style: italic;
}
.syntax--punctuation.syntax--quasi,
.syntax--punctuation.syntax--section.syntax--embedded {
  color: @syntax-color-value;
}

// Operators
.syntax--operator {
  color: @syntax-color-keyword;
}
.syntax--operator.syntax--assignment {
  color: @syntax-color-keyword;
}
.syntax--operator.syntax--accessor {
  color: @syntax-color-property;
}

// Strings
.syntax--string {
  color: @syntax-color-attribute;
}
.syntax--string.syntax--regexp {
  color: @syntax-color-class;
}
.syntax--string.syntax--quasi,
.syntax--string .syntax--embedded {
  color: @syntax-color-embedded;
}
.syntax--string.syntax--quoted .syntax--begin,
.syntax--string.syntax--quoted .syntax--end {
  color: darken(@syntax-color-string, 37%);
}

// Variables
.syntax--variable {
  color: @syntax-color-variable;
}
.syntax--variable.syntax--property {
  color: @syntax-color-property;
}
.syntax--variable.syntax--static {
  color: @syntax-color-constant;
}
.syntax--variable.syntax--magic,
.syntax--variable.syntax--parameter,
.syntax--parameters .syntax--variable {
  font-style: italic;
  color: @syntax-color-parameter;
}
.syntax--variable.syntax--class {
  color: @syntax-text-color;
}

// Constants
.syntax--constant {
  color: @syntax-color-constant;
}
.syntax--constant.syntax--key {
  font-style: italic;
}
.syntax--constant.syntax--language {
  font-weight: bold;
}
.syntax--constant.syntax--placeholder {
  color: @syntax-color-value;
}
.syntax--constant.syntax--boolean.syntax--true {
  color: @syntax-color-true;
}
.syntax--constant.syntax--boolean.syntax--false {
  color: @syntax-color-false;
}
.syntax--constant.syntax--null {
  color: @syntax-color-null;
}

// Keywords
.syntax--keyword {
  color: @syntax-color-keyword;
}
.syntax--keyword.syntax--other.syntax--special-method {
  color: @syntax-color-definition;
}
.syntax--keyword.syntax--other.syntax--unit {
  color: @syntax-color-value;
}

// Storage
.syntax--storage {
  color: @syntax-color-value;
}
.syntax--storage.syntax--variable {
  font-style: italic;
}
.syntax--storage.syntax--function,
.syntax--storage.syntax--class {
  font-weight: bold;
}

// Entities
.syntax--entity.syntax--other.syntax--inherited-class {
  font-style: italic;
}
.syntax--entity.syntax--other.syntax--attribute-name {
  color: @syntax-color-attribute;
}
.syntax--entity.syntax--other.syntax--attribute-name.syntax--id {
  color: @syntax-color-function;
}
.syntax--entity.syntax--name.syntax--tag {
  color: @syntax-color-keyword;
}
.syntax--entity.syntax--name.syntax--class {
  color: @syntax-color-keyword;
}
.syntax--entity.syntax--name.syntax--function {
  color: @syntax-color-function;
}
.syntax--entity.syntax--name.syntax--type {
 color: @syntax-color-function;
}
.syntax--entity.syntax--quasi {
  color: @syntax-color-value;
}

// Support
.syntax--support {
  color: @syntax-color-keyword;
}
.syntax--support.syntax--function {
 font-weight: bold;
}
.syntax--support.syntax--type {
  font-style: italic;
  color: @syntax-color-class;
}

// Invalid
.syntax--invalid {
  background-color: @bad;
  color: @syntax-text-color;
}
.syntax--invalid.syntax--deprecated {
  background-color: @warn;
  color: @syntax-text-color;
}

// Meta
.syntax--meta.syntax--link {
  color: @syntax-color-link;
}
.syntax--meta.syntax--selector {
  color: @syntax-color-constant;
}
.syntax--meta.syntax--separator {
  background-color: @syntax-background-color;
  color: @syntax-text-color;
}
.syntax--meta.syntax--brace {
  color: @syntax-color-brace;
}
.syntax--meta .syntax--tag.syntax--sgml {
  color: @syntax-color-value;
}
.syntax--meta .syntax--preprocessor {
  color: @syntax-color-constant;
}

// None ?
.syntax--none {
  color: @syntax-text-color;
}
